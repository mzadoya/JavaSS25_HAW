// This source code is UTF-8 coded - see https://stackoverflow.com/questions/9180981/how-to-support-utf-8-encoding-in-eclipse
package kw24.required.a4x3.palindromeFinder;

import java.util.Random;

import java.util.Scanner;

import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.Beautician;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.EnvironmentAnalyzer;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.GivenCodeVersion;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.Version;


/**
 * Die Klasse {@link TestFrameAndStarter} testet und startet die L√∂sung(en) zur
 * Aufgabe "PalindromeFinder/LongestPalindrome" - see task
 * 
 * @author  Michael Schaefers  ([UTF-8]:"Michael Sch√§fers");
 *          P1@Hamburg-UAS.eu 
 * @version {@value #encodedVersion} 
 */
public class TestFrameAndStarter {
    //
    //--VERSION:-------------------------------#---vvvvvvvvv---vvvv-vv-vv--vv
    //  ========                               #___~version~___YYYY_MM_DD__dd_
    final static private long encodedVersion = 2___00002_002___2024_05_26__01L;
    //-----------------------------------------#---^^^^^-^^^---^^^^-^^-^^--^^
    final static private Version version = new Version( encodedVersion );
    static public String getDecodedVersion(){ return version.getDecodedVersion(); }
    // Obiges (ab VERSION) dient nur der Versionierung
    
    
    
    
    
    /**
     * Diese Methode {@link #main()} testet und startet Ihre L√∂sung zur Aufgabe: "PalindromeFinder/LongestPalindrome".
     * Hierf√ºr m√ºssen Sie den Test durch Entfernen der Blockkommentarzeichen "aktivieren",
     * sobald Ihre L√∂sung fertiggestellt ist.
     * Die Tests in dieser Methode d√ºrfen nicht ge√§ndert werden.
     * Aber, Sie d√ºrfen gerne eigene Tests am Ende der Methode erg√§nzen.
     * 
     * @param unused wird nicht genutzt, aber "von Java eingefordert".
     */
    public static void main( final String... unused ){
        
        // print some information at start
        System.out.printf( "TestFrame information\n" );
        System.out.printf( "=====================\n" );
        System.out.printf( "\n" );
        //
        System.out.printf( "Release:\n" );
        System.out.printf( "    GivenCode version:      %s\n",  GivenCodeVersion.getDecodedVersion() );
        System.out.printf( "    Test version:           %s\n",  version.getDecodedVersion() );
        System.out.printf( "\n" );
        //
        System.out.printf( "Environment:\n" );
        System.out.printf( "    #Cores:                 %d\n",  EnvironmentAnalyzer.getAvailableCores() );
        System.out.printf( "    Java:                   %s\n",  EnvironmentAnalyzer.getJavaVersion() );
        System.out.printf( "    assert enabled?:        %s\n",  EnvironmentAnalyzer.isAssertEnabled() );
        System.out.printf( "    UTF-8 configured?:      %s      <- check output\n",  "[√Ñ√ã√è√ñ√ú·∫û√§√´√Ø√∂√º√üüôÇüòâüôÅüòüüòìüòé]" );
        System.out.printf( "\n\n\n\n" );
        //
        System.out.printf( "Start of actual test\n" );
        System.out.printf( "vvvvvvvvvvvvvvvvvvvv\n" );
        System.out.printf( "\n\n" );
        //
        System.out.flush();
        
        
        
        
        
        // Anfang des eigentlichen Tests
        //==============================
        
        // Sobald Sie Ihre L√∂sung(en) in der/den geforderten Klasse(n) implementiert
        // haben,  m√ºssen die Blockkommentarzeichen entfernt werden.
        //vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                                                             // <- muss weg
        String givenText = "Werner sagte: \"Es stellen sich neben dem Reliefpfeiler auf: Otto neben Otto und Ede neben Ede.\"";
        PalindromeFinder palindromeFinder = new PalindromeFinder( givenText );
        System.out.printf( "Der folgende Text\n" );
        System.out.printf( "    %s\n",  givenText );
        System.out.printf( "    ____________________~~~~______~~~~~~~___~~~~~~~~~~~~~~~____^^^^^^^^^^^^^^^^^___~~~~~~~~~~~~~~_\n" );
        System.out.printf( "\n" );
        System.out.printf( "liefert:\n" );
        System.out.printf( "    %s\n",  palindromeFinder.getText() );
        System.out.printf( "und\n" );
        System.out.printf( "    " );
        printTestResult( palindromeFinder.getLongestPalindrome() );
        System.out.printf( "\n\n\n" );
        
        
        
        System.out.printf( "Preparing next test.\n" );
        System.out.printf( "The result is expected in about 5 seconds that means in particular less than one minute.\n" );
        StringBuilder sb = new StringBuilder( "apbbpcccp");
        for( int stillToDo=42; --stillToDo>=0; )  sb.append( "x" );
        sb.append( "q" );
        for( int stillToDo=1_000_000; --stillToDo>=0; )  sb.append( "xxxxxxxxxx" );
        sb.append( "p" );
        for( int stillToDo=42; --stillToDo>=0; )  sb.append( "x" );
        sb.append( "qcccqbbqa" );
        givenText = sb.toString();
        System.out.printf( "Starting actual test.\n" );
        palindromeFinder = new PalindromeFinder( givenText );
        final long timeStamp1st = System.nanoTime();
        final String pali = palindromeFinder.getLongestPalindrome();
        final long timeStamp2nd = System.nanoTime();
        assert 10_000_000 == pali.length();
        assert 'x' == pali.charAt( 0 );
        assert 'x' == pali.charAt( 9_999_999 );
        final long delta = timeStamp2nd - timeStamp1st;
        System.out.printf( "Test passed after %s.",  Beautician.nanoSecondBasedTimeToString( delta ));
        System.out.printf( "\n\n\n" );
        
        
        
        System.out.printf( "And now an interactive test.\n\n" );
        try(
            final Scanner workAroundForSeriousUserInterface = new Scanner( System.in );
        ){
            System.out.printf( "Gebe einen Text ein\n" );
            System.out.printf( "und tippe danach die Return-Teste um die Eingabe abzuschliessen.\n" );
            System.out.printf( "=> " );
            //
            final String theText = workAroundForSeriousUserInterface.nextLine();
            palindromeFinder.setText( theText );
            System.out.printf( "Der folgene Text\n" );
            if( null != theText ){
                System.out.printf( "    %s\n",  palindromeFinder.getText() );
            }else{
                System.out.printf( "    null\n" );
            }//if
            System.out.printf( "liefert:\n" );
            printTestResult( palindromeFinder.getLongestPalindrome() );
            
        }catch( final Throwable ex ){
            if( ! (( ex instanceof AssertionError ) || ( ex instanceof IllegalArgumentException ))){
                System.out.flush();
                System.err.printf( "###\n" );
                System.err.printf( "### Uuuupppss, was ist denn da passiert ????\n" );
                System.err.printf( "###\n" );
                System.err.printf( "\n" );
            }//if
            throw( ex );
        }//try
        
        
        
        System.out.printf( "\n\n" );
        System.out.printf( "END OF GIVEN TESTs\n" );
        System.out.printf( "-------------------------------------------------------------------------------\n" );
        System.out.printf( "OPTIONAL TESTs  from Student(s)\n" );
        System.out.printf( "\n\n" );
                                                                           // <- muss weg
        //###
        //###   Oberhalb dieser Position sind KEINE √Ñnderungen am Code erlaubt.
        //###   Bei der Abgabe m√ºssen die oberen Zeilen im Original-Zustand sein.
        //###   W√§hrend der Entwicklung w√§re ein kurzzeitiges (teilweises) Auskommentieren,
        //###   das vor der Abgabe rueckg√§ngig gemacht wird,  erlaubt.
        //###
        //###-------------------------------------------------------------------
        //###
        //###   Ab HIER d√ºrfen Sie gerne eigene Tests erg√§nzen
        //###
        //###                    VVVV
        //###                    VVVV
        //###                    VVVV
        //###   VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
        //###      VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
        //###         VVVVVVVVVVVVVVVVVVVVVVVVVV
        //###            VVVVVVVVVVVVVVVVVVVV
        //###               VVVVVVVVVVVVVV
        //###                  VVVVVVVV
        //###                     VV
        
        performanceTest();
        
        // HHH      HHH   III   EEEEEEEEEEEE   RRRRRRRRRRR          <<<                                  !!!
        // HHH      HHH   III   EEEEEEEEEEEE   RRRRRRRRRRRR        <<<                                   !!!
        // HHH      HHH   III   EEE            RRR      RRR       <<<                                    !!!
        // HHH      HHH   III   EEE            RRR      RRR      <<<                                     !!!
        // HHHHHHHHHHHH   III   EEEEEEEEEEEE   RRRRRRRRRRR      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     !!!
        // HHHHHHHHHHHH   III   EEEEEEEEEEEE   RRRRRRRRRR       <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     !!!
        // HHH      HHH   III   EEE            RRR   RRR         <<<                                     !!!
        // HHH      HHH   III   EEE            RRR    RRR         <<<
        // HHH      HHH   III   EEEEEEEEEEEE   RRR     RRR         <<<                                   !!!
        // HHH      HHH   III   EEEEEEEEEEEE   RRR      RRR         <<<                                  !!!
        //
        //
        // F√ºgen Sie hier Ihre zus√§tzlichen Tests ein
        // bzw. ersetzen Sie diesen Kommentar durch Ihren Code.
        
        
        
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }//method()
    
    public static String generateHugeTestString() {
        StringBuilder sb = new StringBuilder();
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        sb.append("start");
        
        // 1. –û–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ)
        for (int i = 0; i < 1_000_000; i++) {
            sb.append("x");
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        sb.append("middle");
        
        // 2. –ë–æ–ª—å—à–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (500k —Å–∏–º–≤–æ–ª–æ–≤)
        for (int i = 0; i < 250_000; i++) {
            sb.append("a");
        }
        sb.append("Z");  // –¶–µ–Ω—Ç—Ä —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        for (int i = 0; i < 250_000; i++) {
            sb.append("a");
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å  
        sb.append("separator");
        
        // 3. –°—Ä–µ–¥–Ω–∏–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º (100k —Å–∏–º–≤–æ–ª–æ–≤)
        for (int i = 0; i < 50_000; i++) {
            sb.append("b");
        }
        for (int i = 0; i < 50_000; i++) {
            sb.append("b");
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ
        sb.append("random text at the end with some palindromes like racecar and level");
        
        return sb.toString();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public static void performanceTest() {
        System.out.println("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–≥—Ä–æ–º–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É...");
        String hugeString = generateHugeTestString();
        
        System.out.println("–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: " + hugeString.length() + " —Å–∏–º–≤–æ–ª–æ–≤");
        System.out.println("–ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: " + hugeString.substring(0, 50));
        System.out.println("–°–∏–º–≤–æ–ª—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ 1000000-1000050: " + 
                          hugeString.substring(1000000, 1000050));
        
        PalindromeFinder pf = new PalindromeFinder(hugeString);
        
        System.out.println("\n–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞...");
        long startTime = System.currentTimeMillis();
        
        String result = pf.getLongestPalindrome();
        
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        
        System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω!");
        System.out.println("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + " –º—Å (" + (duration/1000.0) + " —Å–µ–∫)");
        System.out.println("–î–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞: " + result.length());
        System.out.println("–ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " + 
                          result.substring(0, Math.min(20, result.length())));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
        boolean isPalindrome = result.equals(new StringBuilder(result.toLowerCase()).reverse().toString());
        System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º: " + isPalindrome);
    }
    //++++ EXTERN START++++ 
    public static String generateExtremeTestString() {
        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        
        System.out.println("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...");
        
        // 1. –û–ì–†–û–ú–ù–´–ô –±–ª–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (5 –º–∏–ª–ª–∏–æ–Ω–æ–≤)
        System.out.println("–î–æ–±–∞–≤–ª—è–µ–º 5 –º–ª–Ω —Å–∏–º–≤–æ–ª–æ–≤ 'x'...");
        for (int i = 0; i < 5_000_000; i++) {
            sb.append('x');
        }
        
        // 2. –°–ü–†–Ø–¢–ê–ù–ù–´–ï –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ 'x'
        System.out.println("–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã...");
        
        // –ë–æ–ª—å—à–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –≤ –ø–æ–∑–∏—Ü–∏–∏ 1 –º–ª–Ω
        insertPalindromeAt(sb, 1_000_000, "a", 50_000, "MEGA");  // 100k + —Ü–µ–Ω—Ç—Ä
        
        // –°—Ä–µ–¥–Ω–∏–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –≤ –ø–æ–∑–∏—Ü–∏–∏ 2 –º–ª–Ω  
        insertPalindromeAt(sb, 2_000_000, "b", 25_000, "SUPER"); // 50k + —Ü–µ–Ω—Ç—Ä
        
        // –ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –≤ –ø–æ–∑–∏—Ü–∏–∏ 3 –º–ª–Ω
        insertPalindromeAt(sb, 3_000_000, "c", 10_000, "HIDDEN"); // 20k + —Ü–µ–Ω—Ç—Ä
        
        // 3. –ú–ù–û–ñ–ï–°–¢–í–û –º–µ–ª–∫–∏—Ö –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        System.out.println("–î–æ–±–∞–≤–ª—è–µ–º 1000 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤...");
        String[] smallPalindromes = {
            "racecar", "level", "deed", "noon", "civic", "radar", "refer", 
            "madam", "kayak", "rotator", "deified", "reviver", "repaper"
        };
        
        for (int i = 0; i < 1000; i++) {
            int pos = random.nextInt(sb.length() - 100);
            String pal = smallPalindromes[random.nextInt(smallPalindromes.length)];
            sb.replace(pos, pos + pal.length(), pal);
        }
        
        // 4. –î–õ–ò–ù–ù–´–ï –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        System.out.println("–î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤...");
        
        // 1 –º–∏–ª–ª–∏–æ–Ω 'y'
        for (int i = 0; i < 1_000_000; i++) {
            sb.append('y');
        }
        
        // –ü–∞–ª–∏–Ω–¥—Ä–æ–º –∏–∑ 'y' —Å —Ü–µ–Ω—Ç—Ä–æ–º
        int yStart = sb.length() - 500_000;
        sb.replace(yStart, yStart + 1, "Z"); // –¶–µ–Ω—Ç—Ä –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        
        // 500k 'z'
        for (int i = 0; i < 500_000; i++) {
            sb.append('z');
        }
        
        // 5. –°–ú–ï–®–ê–ù–ù–´–ï –±–ª–æ–∫–∏ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞–º–∏
        System.out.println("–î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏...");
        addMixedPalindromeBlock(sb, 100_000);
        addMixedPalindromeBlock(sb, 75_000);
        addMixedPalindromeBlock(sb, 50_000);
        
        // 6. –§–ò–ù–ê–õ–¨–ù–´–ô –æ–≥—Ä–æ–º–Ω—ã–π –±–ª–æ–∫ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
        System.out.println("–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π –±–ª–æ–∫...");
        addComplexNestedStructure(sb, 2_000_000);
        
        System.out.println("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤!");
        return sb.toString();
    }

    private static void insertPalindromeAt(StringBuilder sb, int position, String baseChar, int halfSize, String center) {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ª–∏–Ω–¥—Ä–æ–º: halfSize * baseChar + center + halfSize * baseChar
        StringBuilder palindrome = new StringBuilder();
        for (int i = 0; i < halfSize; i++) {
            palindrome.append(baseChar);
        }
        palindrome.append(center);
        for (int i = 0; i < halfSize; i++) {
            palindrome.append(baseChar);
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
        int endPos = Math.min(position + palindrome.length(), sb.length());
        sb.replace(position, endPos, palindrome.toString());
    }

    private static void addMixedPalindromeBlock(StringBuilder sb, int size) {
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –º–µ–ª–∫–∏—Ö –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
        StringBuilder block = new StringBuilder();
        Random random = new Random();
        String[] chars = {"a", "b", "c", "d", "e"};
        
        for (int i = 0; i < size; i += 10) {
            if (random.nextBoolean()) {
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏-–ø–∞–ª–∏–Ω–¥—Ä–æ–º
                String ch = chars[random.nextInt(chars.length)];
                block.append(ch).append(ch).append(ch); // "aaa"
                i += 2;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
                block.append(chars[random.nextInt(chars.length)]);
            }
        }
        
        sb.append(block);
    }

    private static void addComplexNestedStructure(StringBuilder sb, int totalSize) {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: [—Å–ª—É—á–∞–π–Ω—ã–µ] + [–æ–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º] + [—Å–ª—É—á–∞–π–Ω—ã–µ]
        Random random = new Random();
        
        // 25% —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        int randomPart = totalSize / 4;
        for (int i = 0; i < randomPart; i++) {
            sb.append((char)('a' + random.nextInt(26)));
        }
        
        // 50% - –æ–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –∏–∑ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        int palindromeSize = totalSize / 2;
        StringBuilder palindrome = new StringBuilder();
        for (int i = 0; i < palindromeSize / 2; i++) {
            char ch = (char)('a' + (i % 5)); // –¶–∏–∫–ª–∏—á–Ω–æ a,b,c,d,e
            palindrome.append(ch);
        }
        String center = "ULTIMATE_CENTER";
        palindrome.append(center);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≤–µ—Ä—Å
        for (int i = palindromeSize / 2 - 1; i >= 0; i--) {
            char ch = (char)('a' + (i % 5));
            palindrome.append(ch);
        }
        sb.append(palindrome);
        
        // –û—Å—Ç–∞–≤—à–∏–µ—Å—è 25% - —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for (int i = 0; i < totalSize - randomPart - palindrome.length(); i++) {
            sb.append((char)('a' + random.nextInt(26)));
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public static void extremePerformanceTest() {
        System.out.println("=== –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===");
        
        String extremeString = generateExtremeTestString();
        
        System.out.println("–û–±—â–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: " + extremeString.length() + " —Å–∏–º–≤–æ–ª–æ–≤");
        System.out.println("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ " + (extremeString.length() / 1_000_000.0) + " –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤");
        
        PalindromeFinder pf = new PalindromeFinder(extremeString);
        
        System.out.println("\nüöÄ –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê...");
        System.out.println("–û–∂–∏–¥–∞–µ–º—ã–π —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º: 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ 'x'");
        
        long startTime = System.currentTimeMillis();
        String result = pf.getLongestPalindrome();
        long endTime = System.currentTimeMillis();
        
        long duration = endTime - startTime;
        
        System.out.println("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:");
        System.out.println("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + " –º—Å (" + (duration/1000.0) + " —Å–µ–∫)");
        System.out.println("üìè –î–ª–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞: " + result.length());
        System.out.println("üî§ –ü–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤: " + result.substring(0, Math.min(30, result.length())));
        System.out.println("üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + (extremeString.length() / Math.max(duration, 1)) + " —Å–∏–º–≤–æ–ª–æ–≤/–º—Å");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        if (result.length() < 1000) {
            boolean isPalindromeResult = pf.isPalindrome(result);
            System.out.println("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: " + isPalindromeResult);
        } else {
            System.out.println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
        }
    }


    //++++ EXTERN END ++++ 
    private static void printTestResult( final String testResult ){
        if( null != testResult ){
            System.out.printf( "\"%s\" -> length=%d\n",  testResult, testResult.length() );
        }else{
            System.out.printf( "null\n" );
        }//if
    }//method()
    
}//class
