// This source code is UTF-8 coded - see https://stackoverflow.com/questions/9180981/how-to-support-utf-8-encoding-in-eclipse
package kw24.required.a4x3V2.palindromeFinder;


import java.util.Scanner;

import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.Beautician;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.EnvironmentAnalyzer;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.GivenCodeVersion;
import kw24.required.a4x3.stuffBeginnersDontHaveToUnderstand.Version;


/**
 * Die Klasse {@link TestFrameAndStarter} testet und startet die L√∂sung(en) zur
 * Aufgabe "PalindromeFinder/LongestPalindrome" - see task
 * 
 * @author  Michael Schaefers  ([UTF-8]:"Michael Sch√§fers");
 *          P1@Hamburg-UAS.eu 
 * @version {@value #encodedVersion} 
 */
public class TestFrameAndStarter {
    //
    //--VERSION:-------------------------------#---vvvvvvvvv---vvvv-vv-vv--vv
    //  ========                               #___~version~___YYYY_MM_DD__dd_
    final static private long encodedVersion = 2___00002_002___2024_05_26__01L;
    //-----------------------------------------#---^^^^^-^^^---^^^^-^^-^^--^^
    final static private Version version = new Version( encodedVersion );
    static public String getDecodedVersion(){ return version.getDecodedVersion(); }
    // Obiges (ab VERSION) dient nur der Versionierung
    
    
    
    
    
    /**
     * Diese Methode {@link #main()} testet und startet Ihre L√∂sung zur Aufgabe: "PalindromeFinder/LongestPalindrome".
     * Hierf√ºr m√ºssen Sie den Test durch Entfernen der Blockkommentarzeichen "aktivieren",
     * sobald Ihre L√∂sung fertiggestellt ist.
     * Die Tests in dieser Methode d√ºrfen nicht ge√§ndert werden.
     * Aber, Sie d√ºrfen gerne eigene Tests am Ende der Methode erg√§nzen.
     * 
     * @param unused wird nicht genutzt, aber "von Java eingefordert".
     */
    public static void main( final String... unused ){
        
        // print some information at start
        System.out.printf( "TestFrame information\n" );
        System.out.printf( "=====================\n" );
        System.out.printf( "\n" );
        //
        System.out.printf( "Release:\n" );
        System.out.printf( "    GivenCode version:      %s\n",  GivenCodeVersion.getDecodedVersion() );
        System.out.printf( "    Test version:           %s\n",  version.getDecodedVersion() );
        System.out.printf( "\n" );
        //
        System.out.printf( "Environment:\n" );
        System.out.printf( "    #Cores:                 %d\n",  EnvironmentAnalyzer.getAvailableCores() );
        System.out.printf( "    Java:                   %s\n",  EnvironmentAnalyzer.getJavaVersion() );
        System.out.printf( "    assert enabled?:        %s\n",  EnvironmentAnalyzer.isAssertEnabled() );
        System.out.printf( "    UTF-8 configured?:      %s      <- check output\n",  "[√Ñ√ã√è√ñ√ú·∫û√§√´√Ø√∂√º√üüôÇüòâüôÅüòüüòìüòé]" );
        System.out.printf( "\n\n\n\n" );
        //
        System.out.printf( "Start of actual test\n" );
        System.out.printf( "vvvvvvvvvvvvvvvvvvvv\n" );
        System.out.printf( "\n\n" );
        //
        System.out.flush();
        
        
        
        
        
        // Anfang des eigentlichen Tests
        //==============================
        
        // Sobald Sie Ihre L√∂sung(en) in der/den geforderten Klasse(n) implementiert
        // haben,  m√ºssen die Blockkommentarzeichen entfernt werden.
        //vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                                                             // <- muss weg
        String givenText = "Werner sagte: \"Es stellen sich neben dem Reliefpfeiler auf: Otto neben Otto und Ede neben Ede.\"";
        PalindromeFinder palindromeFinder = new PalindromeFinder( givenText );
        System.out.printf( "Der folgende Text\n" );
        System.out.printf( "    %s\n",  givenText );
        System.out.printf( "    ____________________~~~~______~~~~~~~___~~~~~~~~~~~~~~~____^^^^^^^^^^^^^^^^^___~~~~~~~~~~~~~~_\n" );
        System.out.printf( "\n" );
        System.out.printf( "liefert:\n" );
        System.out.printf( "    %s\n",  palindromeFinder.getText() );
        System.out.printf( "und\n" );
        System.out.printf( "    " );
        printTestResult( palindromeFinder.getLongestPalindrome() );
        System.out.printf( "\n\n\n" );
        
        
        
        System.out.printf( "Preparing next test.\n" );
        System.out.printf( "The result is expected in about 5 seconds that means in particular less than one minute.\n" );
        StringBuilder sb = new StringBuilder( "apbbpcccp");
        for( int stillToDo=42; --stillToDo>=0; )  sb.append( "x" );
        sb.append( "q" );
        for( int stillToDo=1_000_000; --stillToDo>=0; )  sb.append( "xxxxxxxxxx" );
        sb.append( "p" );
        for( int stillToDo=42; --stillToDo>=0; )  sb.append( "x" );
        sb.append( "qcccqbbqa" );
        givenText = sb.toString();
        System.out.printf( "Starting actual test.\n" );
        palindromeFinder = new PalindromeFinder( givenText );
        final long timeStamp1st = System.nanoTime();
        final String pali = palindromeFinder.getLongestPalindrome();
        final long timeStamp2nd = System.nanoTime();
        assert 10_000_000 == pali.length();
        assert 'x' == pali.charAt( 0 );
        assert 'x' == pali.charAt( 9_999_999 );
        final long delta = timeStamp2nd - timeStamp1st;
        System.out.printf( "Test passed after %s.",  Beautician.nanoSecondBasedTimeToString( delta ));
        System.out.printf( "\n\n\n" );
        
        
        
        System.out.printf( "And now an interactive test.\n\n" );
        try(
            final Scanner workAroundForSeriousUserInterface = new Scanner( System.in );
        ){
            System.out.printf( "Gebe einen Text ein\n" );
            System.out.printf( "und tippe danach die Return-Teste um die Eingabe abzuschliessen.\n" );
            System.out.printf( "=> " );
            //
            final String theText = workAroundForSeriousUserInterface.nextLine();
            palindromeFinder.setText( theText );
            System.out.printf( "Der folgene Text\n" );
            if( null != theText ){
                System.out.printf( "    %s\n",  palindromeFinder.getText() );
            }else{
                System.out.printf( "    null\n" );
            }//if
            System.out.printf( "liefert:\n" );
            printTestResult( palindromeFinder.getLongestPalindrome() );
            
        }catch( final Throwable ex ){
            if( ! (( ex instanceof AssertionError ) || ( ex instanceof IllegalArgumentException ))){
                System.out.flush();
                System.err.printf( "###\n" );
                System.err.printf( "### Uuuupppss, was ist denn da passiert ????\n" );
                System.err.printf( "###\n" );
                System.err.printf( "\n" );
            }//if
            throw( ex );
        }//try
        
        
        
        System.out.printf( "\n\n" );
        System.out.printf( "END OF GIVEN TESTs\n" );
        System.out.printf( "-------------------------------------------------------------------------------\n" );
        System.out.printf( "OPTIONAL TESTs  from Student(s)\n" );
        System.out.printf( "\n\n" );
                                                                           // <- muss weg
        //###
        //###   Oberhalb dieser Position sind KEINE √Ñnderungen am Code erlaubt.
        //###   Bei der Abgabe m√ºssen die oberen Zeilen im Original-Zustand sein.
        //###   W√§hrend der Entwicklung w√§re ein kurzzeitiges (teilweises) Auskommentieren,
        //###   das vor der Abgabe rueckg√§ngig gemacht wird,  erlaubt.
        //###
        //###-------------------------------------------------------------------
        //###
        //###   Ab HIER d√ºrfen Sie gerne eigene Tests erg√§nzen
        //###
        //###                    VVVV
        //###                    VVVV
        //###                    VVVV
        //###   VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
        //###      VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
        //###         VVVVVVVVVVVVVVVVVVVVVVVVVV
        //###            VVVVVVVVVVVVVVVVVVVV
        //###               VVVVVVVVVVVVVV
        //###                  VVVVVVVV
        //###                     VV
        
        performanceTest();
        
        // HHH      HHH   III   EEEEEEEEEEEE   RRRRRRRRRRR          <<<                                  !!!
        // HHH      HHH   III   EEEEEEEEEEEE   RRRRRRRRRRRR        <<<                                   !!!
        // HHH      HHH   III   EEE            RRR      RRR       <<<                                    !!!
        // HHH      HHH   III   EEE            RRR      RRR      <<<                                     !!!
        // HHHHHHHHHHHH   III   EEEEEEEEEEEE   RRRRRRRRRRR      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     !!!
        // HHHHHHHHHHHH   III   EEEEEEEEEEEE   RRRRRRRRRR       <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     !!!
        // HHH      HHH   III   EEE            RRR   RRR         <<<                                     !!!
        // HHH      HHH   III   EEE            RRR    RRR         <<<
        // HHH      HHH   III   EEEEEEEEEEEE   RRR     RRR         <<<                                   !!!
        // HHH      HHH   III   EEEEEEEEEEEE   RRR      RRR         <<<                                  !!!
        //
        //
        // F√ºgen Sie hier Ihre zus√§tzlichen Tests ein
        // bzw. ersetzen Sie diesen Kommentar durch Ihren Code.
        
        
        
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }//method()
    
    public static String generateHugeTestString() {
        StringBuilder sb = new StringBuilder();
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        sb.append("start");
        
        // 1. –û–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ)
        for (int i = 0; i < 1_000_000; i++) {
            sb.append("x");
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        sb.append("middle");
        
        // 2. –ë–æ–ª—å—à–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (500k —Å–∏–º–≤–æ–ª–æ–≤)
        for (int i = 0; i < 250_000; i++) {
            sb.append("a");
        }
        sb.append("Z");  // –¶–µ–Ω—Ç—Ä —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        for (int i = 0; i < 250_000; i++) {
            sb.append("a");
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å  
        sb.append("separator");
        
        // 3. –°—Ä–µ–¥–Ω–∏–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º (100k —Å–∏–º–≤–æ–ª–æ–≤)
        for (int i = 0; i < 50_000; i++) {
            sb.append("b");
        }
        for (int i = 0; i < 50_000; i++) {
            sb.append("b");
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ
        sb.append("random text at the end with some palindromes like racecar and level");
        
        return sb.toString();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   
    private static void performanceTest() {
        System.out.printf("=== –ì–ò–ü–ï–†-–°–õ–û–ñ–ù–´–ï –¢–ï–°–¢–´ ===\n\n");
        
        // –¢–ï–°–¢ 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
        System.out.printf("–¢–µ—Å—Ç 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã\n");
        String complexPalindromes = "abcdefghijklmnopqrstuvwxyzabacabABCcbacbacbAzyxwvutsrqponmlkjihgfedcbaabcdefg";
        testPalindrome(complexPalindromes, "–í–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã");
        
        // –¢–ï–°–¢ 2: –û–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (1 –º–∏–ª–ª–∏–æ–Ω —Å–∏–º–≤–æ–ª–æ–≤)
        System.out.printf("–¢–µ—Å—Ç 2: –û–≥—Ä–æ–º–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º (1M —Å–∏–º–≤–æ–ª–æ–≤)\n");
        StringBuilder hugePalindrome = new StringBuilder();
        String base = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
        for (int i = 0; i < 10000; i++) {
            hugePalindrome.append(base);
        }
        hugePalindrome.append("–¶–ï–ù–¢–†");
        for (int i = 9999; i >= 0; i--) {
            hugePalindrome.reverse().append(base).reverse();
        }
        testPalindrome(hugePalindrome.toString(), "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º");
        
        // –¢–ï–°–¢ 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å "–ª–æ–≤—É—à–∫–∞–º–∏"
        System.out.printf("–¢–µ—Å—Ç 3: –õ–æ–≤—É—à–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏\n");
        StringBuilder trickTest = new StringBuilder();
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–æ–≤ "aaaa" –Ω–æ —Å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–º –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –≤ –∫–æ–Ω—Ü–µ
        for (int i = 0; i < 50000; i++) {
            trickTest.append("aaaa");
        }
        trickTest.append("bcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcb");
        testPalindrome(trickTest.toString(), "–õ–æ–≤—É—à–∫–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏");
        
        // –¢–ï–°–¢ 4: –†–µ–≥–∏—Å—Ç—Ä–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
        System.out.printf("–¢–µ—Å—Ç 4: –°–ª–æ–∂–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã\n");
        String caseTest = "AbCdEfGhIjKlMnOpQrStUvWxYzZyXwVuTsRqPoNmLkJiHgFeDcBaAbCdEfGhI";
        testPalindrome(caseTest, "–†–µ–≥–∏—Å—Ç—Ä–æ-–∑–∞–≤–∏—Å–∏–º—ã–π");
        
        // –¢–ï–°–¢ 5: Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        System.out.printf("–¢–µ—Å—Ç 5: Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n");
        String unicodeTest = "üåüüí´‚≠ê‚ú®üé≠üé™üé®üéØüé≤üé∞üéØüé®üé™üé≠‚ú®‚≠êüí´üåü–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è—è—é—ç—å—ã—ä—â—à—á—Ü—Ö—Ñ—É—Ç—Å—Ä–ø–æ–Ω–º–ª–∫–π–∏–∑–∂—ë–µ–¥–≥–≤–±–∞";
        testPalindrome(unicodeTest, "Unicode —Ç–µ—Å—Ç");
        
        // –¢–ï–°–¢ 6: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º (10 –º–∏–ª–ª–∏–æ–Ω–æ–≤)
        System.out.printf("–¢–µ—Å—Ç 6: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (10M –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)\n");
        StringBuilder extremeTest = new StringBuilder();
        for (int i = 0; i < 10_000_000; i++) {
            extremeTest.append("z");
        }
        testPalindrome(extremeTest.toString(), "10M –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤");
        
        // –¢–ï–°–¢ 7: –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
        System.out.printf("–¢–µ—Å—Ç 7: –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã\n");
        String alternatingTest = "aba" + "cddc" + "efgfe" + "hijklkjih" + "mnopqponm" + "rstuvwxwvutsr";
        testPalindrome(alternatingTest, "–ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã");
        
        // –¢–ï–°–¢ 8: –ü–æ—á—Ç–∏-–ø–∞–ª–∏–Ω–¥—Ä–æ–º (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ)
        System.out.printf("–¢–µ—Å—Ç 8: –ü–æ—á—Ç–∏-–ø–∞–ª–∏–Ω–¥—Ä–æ–º\n");
        String almostPalindrome = "abcdefghijklmnopqXstuvwxyzzyxwvutsrqponmlkjihgfedcba";
        testPalindrome(almostPalindrome, "–ü–æ—á—Ç–∏-–ø–∞–ª–∏–Ω–¥—Ä–æ–º");
        
        // –¢–ï–°–¢ 9: –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ null
        System.out.printf("–¢–µ—Å—Ç 9: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏\n");
        testPalindrome("", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞");
        testPalindrome("a", "–û–¥–∏–Ω —Å–∏–º–≤–æ–ª");
        testPalindrome("ab", "–î–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞");
        testPalindrome("aa", "–î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞");
        
        // –¢–ï–°–¢ 10: –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã
        System.out.printf("–¢–µ—Å—Ç 10: –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π —Ç–µ—Å—Ç\n");
        String multilangTest = "English—Å–∏–ª–∏–ì–Ω–≠hsilgnE‰∏≠ÊñáÂ≠óÁ¨¶Á¨¶Â≠óÊñá‰∏≠ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨Œ¨Œ∫ŒπŒΩŒ∑ŒªŒªŒï";
        testPalindrome(multilangTest, "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π");
        
        // –¢–ï–°–¢ 11: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–∞—Ö
        System.out.printf("–¢–µ—Å—Ç 11: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–∞—Ö\n");
        StringBuilder alternatingPerf = new StringBuilder();
        for (int i = 0; i < 1_000_000; i++) {
            alternatingPerf.append(i % 2 == 0 ? "a" : "b");
        }
        testPalindrome(alternatingPerf.toString(), "–ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (1M)");
        
        // –¢–ï–°–¢ 12: –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô: –ú–∞—Ç—Ä—ë—à–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
        System.out.printf("–¢–µ—Å—Ç 12: –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô - –ú–∞—Ç—Ä—ë—à–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤\n");
        String matryoshka = buildMatryoshkaPalindrome(5, 1000);
        testPalindrome(matryoshka, "–ú–∞—Ç—Ä—ë—à–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤");
        
        System.out.printf("\n=== –í–°–ï –ì–ò–ü–ï–†-–°–õ–û–ñ–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===\n");
    }

    private static void testPalindrome(String input, String testName) {
        System.out.printf("–¢–µ—Å—Ç–∏—Ä—É—é: %s (–¥–ª–∏–Ω–∞: %d)\n", testName, input.length());
        
        PalindromeFinder finder = new PalindromeFinder(input);
        long startTime = System.nanoTime();
        String result = finder.getLongestPalindrome();
        long endTime = System.nanoTime();
        
        long duration = endTime - startTime;
        System.out.printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: '%s' (–¥–ª–∏–Ω–∞: %d)\n", 
            result.length() > 50 ? result.substring(0, 47) + "..." : result, 
            result.length());
        System.out.printf("–í—Ä–µ–º—è: %s\n", nanoToString(duration));
        System.out.printf("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.2f —Å–∏–º–≤–æ–ª–æ–≤/–º—Å\n\n", 
            input.length() / (duration / 1_000_000.0));
    }

    private static String buildMatryoshkaPalindrome(int levels, int baseLength) {
        if (levels == 0) return "–¶–ï–ù–¢–†";
        
        StringBuilder sb = new StringBuilder();
        String pattern = "abcdefghijklmnopqrstuvwxyz".substring(0, baseLength % 26);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        sb.append(pattern);
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ä–æ–≤–Ω–∏
        sb.append(buildMatryoshkaPalindrome(levels - 1, baseLength / 2));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        sb.append(new StringBuilder(pattern).reverse());
        
        return sb.toString();
    }

    private static String nanoToString(long nanos) {
        if (nanos < 1_000) return nanos + " ns";
        if (nanos < 1_000_000) return String.format("%.2f Œºs", nanos / 1_000.0);
        if (nanos < 1_000_000_000) return String.format("%.2f ms", nanos / 1_000_000.0);
        return String.format("%.2f s", nanos / 1_000_000_000.0);
    }

    
    
    private static void printTestResult( final String testResult ){
        if( null != testResult ){
            System.out.printf( "\"%s\" -> length=%d\n",  testResult, testResult.length() );
        }else{
            System.out.printf( "null\n" );
        }//if
    }//method()
    
}//class
